/**************************************************************************
 OmegaT - Computer Assisted Translation (CAT) tool 
          with fuzzy matching, translation memory, keyword search, 
          glossaries, and translation leveraging into updated projects.

 Copyright (C) 2013 Zoltan Bartko, Aaron Madlon-Kay
               Home page: http://www.omegat.org/
               Support center: http://groups.yahoo.com/group/OmegaT/

 This file is part of OmegaT.

 OmegaT is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 OmegaT is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **************************************************************************/

package org.omegat.gui.dialogs;

import java.awt.event.KeyEvent;
import javax.swing.JTable;

import org.omegat.gui.common.PeroDialog;
import org.omegat.gui.editor.chartable.CharTableModel;
import org.omegat.util.OStrings;
import org.omegat.util.Preferences;
import org.omegat.util.gui.DockingUI;
import org.omegat.util.gui.StaticUIUtils;

/**
 *
 * @author bartkoz
 * @author Aaron Madlon-Kay
 */
public class CharTableAutoCompleterOptionsDialog extends PeroDialog {

    CharTableModel allCharModel = new CharTableModel(null);
    
    CharTableModel selCharModel = new CharTableModel("");
    
    StringBuilder builder = new StringBuilder();
    
    /**
     * Creates new form CharTableAutoCompleterDialog
     */
    public CharTableAutoCompleterOptionsDialog(java.awt.Frame parent) {
        super(parent, true);
        
        StaticUIUtils.setEscapeClosable(this);

        initComponents();
        allCharTable.setModel(allCharModel);
        selCharTable.setModel(selCharModel);
        
        selectedCharsCheckBox.setSelected(
                Preferences.isPreference(Preferences.AC_CHARTABLE_USE_CUSTOM_CHARS));
        uniqueCheckBox.setSelected(Preferences.isPreference(
                Preferences.AC_CHARTABLE_UNIQUE_CUSTOM_CHARS));
        selCharModel.setData(Preferences.getPreference(
                Preferences.AC_CHARTABLE_CUSTOM_CHAR_STRING));
        
        panelSetEnabled(selectedCharsCheckBox.isSelected());
        DockingUI.displayCentered(this);
    }
    
    private void panelSetEnabled(boolean enabled) {
        customPanel.setEnabled(enabled);
        descriptionTextArea.setEnabled(enabled);
        allCharLabel.setEnabled(enabled);
        allCharTable.setEnabled(enabled);
        if (!enabled) {
            allCharTable.clearSelection();
        }
        selCharLabel.setEnabled(enabled);
        selCharTable.setEnabled(enabled);
        uniqueCheckBox.setEnabled(enabled);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectedCharsCheckBox = new javax.swing.JCheckBox();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        customPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        selCharTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        allCharLabel = new javax.swing.JLabel();
        selCharLabel = new javax.swing.JLabel();
        uniqueCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        allCharTable = new javax.swing.JTable();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(OStrings.getString("AC_CHARTABLE_DIALOG_TITLE")); // NOI18N

        selectedCharsCheckBox.setText(OStrings.getString("AC_CHARTABLE_CUSTOM")); // NOI18N
        selectedCharsCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                selectedCharsCheckBoxStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(okButton, OStrings.getString("BUTTON_OK")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, OStrings.getString("BUTTON_CANCEL")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        customPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        selCharTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        selCharTable.setCellSelectionEnabled(true);
        selCharTable.setTableHeader(null);
        selCharTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                selCharTableKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(selCharTable);

        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        descriptionTextArea.setEditable(false);
        descriptionTextArea.setBackground(getBackground());
        descriptionTextArea.setColumns(20);
        descriptionTextArea.setFont(selectedCharsCheckBox.getFont());
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setText(OStrings.getString("AC_CHARTABLE_EXPLANATION")); // NOI18N
        descriptionTextArea.setWrapStyleWord(true);
        descriptionTextArea.setBorder(null);
        descriptionTextArea.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jScrollPane3.setViewportView(descriptionTextArea);

        allCharLabel.setText(OStrings.getString("AC_CHARTABLE_ALL_LABEL")); // NOI18N

        selCharLabel.setText(OStrings.getString("AC_CHARTABLE_CUSTOM_LABEL")); // NOI18N

        uniqueCheckBox.setText(OStrings.getString("AC_CHARTABLE_CUSTOM_UNIQUE")); // NOI18N
        uniqueCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                uniqueCheckBoxStateChanged(evt);
            }
        });

        allCharTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        allCharTable.setCellSelectionEnabled(true);
        allCharTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        allCharTable.setTableHeader(null);
        allCharTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allCharTableMouseClicked(evt);
            }
        });
        allCharTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                allCharTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(allCharTable);

        clearButton.setText(OStrings.getString("AC_CHARTABLE_CLEAR_BUTTON")); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customPanelLayout = new javax.swing.GroupLayout(customPanel);
        customPanel.setLayout(customPanelLayout);
        customPanelLayout.setHorizontalGroup(
            customPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customPanelLayout.createSequentialGroup()
                        .addComponent(uniqueCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearButton))
                    .addGroup(customPanelLayout.createSequentialGroup()
                        .addGroup(customPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selCharLabel)
                            .addComponent(allCharLabel)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        customPanelLayout.setVerticalGroup(
            customPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(allCharLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(customPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customPanelLayout.createSequentialGroup()
                        .addComponent(selCharLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(uniqueCheckBox))
                    .addComponent(clearButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectedCharsCheckBox)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(customPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectedCharsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void allCharTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_allCharTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_INSERT) {
            int col = allCharTable.getSelectedColumn();
            int row = allCharTable.getSelectedRow();
            selCharModel.appendChar((Character) allCharModel.getValueAt(row, col),
                    uniqueCheckBox.isSelected());
        }
    }//GEN-LAST:event_allCharTableKeyReleased

    private void selCharTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_selCharTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DELETE || 
                evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            if (selCharTable.getSelectedColumnCount() < 1) 
                return;
            
            int row1 = selCharTable.getSelectedRow();
            int col1 = selCharTable.getSelectedColumn();
            int row2 = selCharTable.getSelectedRowCount()+row1-1;
            int col2 = selCharTable.getSelectedColumnCount()+col1-1;
            
            selCharModel.removeSelection(row1, col1, row2, col2);
        }
    }//GEN-LAST:event_selCharTableKeyReleased

    private void uniqueCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_uniqueCheckBoxStateChanged
        if (uniqueCheckBox.isSelected()) {
            selCharModel.allowOnlyUnique();
        }
    }//GEN-LAST:event_uniqueCheckBoxStateChanged

    private void selectedCharsCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_selectedCharsCheckBoxStateChanged
        panelSetEnabled(selectedCharsCheckBox.isSelected());
    }//GEN-LAST:event_selectedCharsCheckBoxStateChanged

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        Preferences.setPreference(Preferences.AC_CHARTABLE_USE_CUSTOM_CHARS,
                selectedCharsCheckBox.isSelected());
        String customCharString = selCharModel.getData();
        Preferences.setPreference(Preferences.AC_CHARTABLE_CUSTOM_CHAR_STRING, 
            customCharString);
        if (customCharString.isEmpty()) {
            Preferences.setPreference(Preferences.AC_CHARTABLE_USE_CUSTOM_CHARS,
                    false);
        }
        Preferences.setPreference(Preferences.AC_CHARTABLE_UNIQUE_CUSTOM_CHARS,
                uniqueCheckBox.isSelected());
        doClose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void allCharTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allCharTableMouseClicked
        if (allCharTable.isEnabled() && evt.getClickCount() == 2) {
            JTable target = (JTable) evt.getSource();
            int row = target.getSelectedRow();
            int col = target.getSelectedColumn();
            selCharModel.appendChar((Character) allCharModel.getValueAt(row, col),
                    uniqueCheckBox.isSelected());
        }
    }//GEN-LAST:event_allCharTableMouseClicked

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        selCharModel.setData("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void doClose() {
        setVisible(false);
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel allCharLabel;
    private javax.swing.JTable allCharTable;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JPanel customPanel;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel selCharLabel;
    private javax.swing.JTable selCharTable;
    private javax.swing.JCheckBox selectedCharsCheckBox;
    private javax.swing.JCheckBox uniqueCheckBox;
    // End of variables declaration//GEN-END:variables
}
