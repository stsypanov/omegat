Index: test/src/org/omegat/core/segmentation/SegmenterTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1251
===================================================================
--- test/src/org/omegat/core/segmentation/SegmenterTest.java	(revision d9ecf428b8eff92ddfef32990452be2b6627ba42)
+++ test/src/org/omegat/core/segmentation/SegmenterTest.java	(revision )
@@ -1,116 +1,120 @@
 /**************************************************************************
- OmegaT - Computer Assisted Translation (CAT) tool 
-          with fuzzy matching, translation memory, keyword search, 
-          glossaries, and translation leveraging into updated projects.
-
- Copyright (C) 2000-2006 Keith Godfrey and Maxym Mykhalchuk
-               Home page: http://www.omegat.org/
-               Support center: http://groups.yahoo.com/group/OmegaT/
-
- This file is part of OmegaT.
-
- OmegaT is free software: you can redistribute it and/or modify
- it under the terms of the GNU General Public License as published by
- the Free Software Foundation, either version 3 of the License, or
- (at your option) any later version.
-
- OmegaT is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- GNU General Public License for more details.
-
- You should have received a copy of the GNU General Public License
- along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ * OmegaT - Computer Assisted Translation (CAT) tool
+ * with fuzzy matching, translation memory, keyword search,
+ * glossaries, and translation leveraging into updated projects.
+ * <p/>
+ * Copyright (C) 2000-2006 Keith Godfrey and Maxym Mykhalchuk
+ * Home page: http://www.omegat.org/
+ * Support center: http://groups.yahoo.com/group/OmegaT/
+ * <p/>
+ * This file is part of OmegaT.
+ * <p/>
+ * OmegaT is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * <p/>
+ * OmegaT is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * <p/>
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
-**************************************************************************/
+ **************************************************************************/
 
 package org.omegat.core.segmentation;
 
+import org.junit.Before;
+import org.junit.Test;
+import org.omegat.core.TestCore;
+import org.omegat.util.Language;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.regex.Pattern;
 
-import junit.framework.Assert;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
-import org.omegat.core.TestCore;
-import org.omegat.util.Language;
-
 /**
  * Tests for OmegaT segmentation.
  *
  * @author Maxym Mykhalchuk
  */
-public class SegmenterTest extends TestCore
-{
+public class SegmenterTest extends TestCore {
+    private static final String EN_FULLSTOP = ".";
+    private static final String JA_FULLSTOP = "\\u3002"; // Unicode escaped
+
     private static final Pattern WHITESPACE_PATTERN = Pattern.compile(" ", Pattern.LITERAL);
+    private static final Pattern EN_FULLSTOP_PATTERN = Pattern.compile(EN_FULLSTOP, Pattern.LITERAL);
 
-    protected void setUp() throws Exception {
+    @Override
+    @Before
+    public void setUp() throws Exception {
         Segmenter.srx = SRX.getDefault();
     }
 
     /**
      * Test of segment method, of class org.omegat.core.segmentation.Segmenter.
      */
-    public void testSegment()
-    {
-        List<StringBuffer> spaces = new ArrayList<StringBuffer>();
+    @Test
+    public void testSegment() {
+        List<StringBuffer> spaces = new ArrayList<>();
-        List<String> segments = Segmenter.segment(new Language("en"),"<br7>\n\n<br5>\n\nother", spaces, new ArrayList<Rule>());
+        List<String> segments = Segmenter.segment(new Language("en"), "<br7>\n\n<br5>\n\nother", spaces, new ArrayList<Rule>());
-        if(segments.size()!=3 || !segments.get(0).equals("<br7>") ||
+        if (segments.size() != 3 || !segments.get(0).equals("<br7>") ||
                 !segments.get(1).equals("<br5>") ||
                 !segments.get(2).equals("other"))
             fail("Bug XXXXXX.");
     }
-    
+
     /**
      * Test of glue method, of class org.omegat.core.segmentation.Segmenter.
      */
-    public void testGlue()
-    {
-        List<StringBuffer> spaces = new ArrayList<StringBuffer>();
-        List<Rule> brules = new ArrayList<Rule>();
+    @Test
+    public void testGlue() {
+        List<StringBuffer> spaces = new ArrayList<>();
+        List<Rule> brules = new ArrayList<>();
         String oldString = "<br7>\n\n<br5>\n\nother";
-        List<String> segments = Segmenter.segment(new Language("en"),oldString, spaces, brules);
+        List<String> segments = Segmenter.segment(new Language("en"), oldString, spaces, brules);
-        String newString = Segmenter.glue(new Language("en"),new Language("fr"),segments, spaces, brules);
+        String newString = Segmenter.glue(new Language("en"), new Language("fr"), segments, spaces, brules);
-        if(!newString.equals(oldString))
+        if (!newString.equals(oldString))
             fail("Glue failed.");
     }
-    
+
     /**
      * Test of glue method for CJK, of class org.omegat.core.segmentation.Segmenter.
      */
-    public void testGlueCJK()
-    {
-        final String EN_FULLSTOP = ".";
-        final String JA_FULLSTOP = "\\u3002"; // Unicode escaped
+    @Test
+    public void testGlueCJK() {
 
         // basic combination
         final String SOURCE = "Foo. Bar.\nHere.\n\nThere.\r\nThis.\tThat.\n\tOther.";
-        final String TRANSLATED = WHITESPACE_PATTERN.matcher(SOURCE).replaceAll("").replace(EN_FULLSTOP, JA_FULLSTOP);
+        final String TRANSLATED = EN_FULLSTOP_PATTERN.matcher(WHITESPACE_PATTERN.matcher(SOURCE).replaceAll("")).replaceAll(JA_FULLSTOP);
         String translated = getPseudoTranslationFromEnToJa(SOURCE);
-        Assert.assertEquals(TRANSLATED, translated);
+        assertEquals(TRANSLATED, translated);
 
         // spaces after/before \n
         final String SOURCE2 = "Foo. \n Bar.";
         final String TRANSLATED2 = "Foo\\u3002\n Bar\\u3002";
         translated = getPseudoTranslationFromEnToJa(SOURCE2);
-        Assert.assertEquals(TRANSLATED2, translated);
+        assertEquals(TRANSLATED2, translated);
 
         // spaces after/before \t
         final String SOURCE3 = "Foo. \t Bar.";
         final String TRANSLATED3 = "Foo\\u3002\t Bar\\u3002";
         translated = getPseudoTranslationFromEnToJa(SOURCE3);
-        Assert.assertEquals(TRANSLATED3, translated);
+        assertEquals(TRANSLATED3, translated);
     }
-    
+
     private String getPseudoTranslationFromEnToJa(final String source) {
-        final String EN_FULLSTOP = ".";
-        final String JA_FULLSTOP = "\\u3002";
-        List<StringBuffer> spaces = new ArrayList<StringBuffer>();
-        List<Rule> brules = new ArrayList<Rule>();
+        List<StringBuffer> spaces = new ArrayList<>();
+        List<Rule> brules = new ArrayList<>();
         List<String> segments = Segmenter.segment(new Language("en"), source, spaces, brules);
 
         // pseudo-translation (just replace full-stop char)
         for (int i = 0; i < segments.size(); i++) {
-            segments.set(i, segments.get(i).replace(EN_FULLSTOP, JA_FULLSTOP));
+            segments.set(i, EN_FULLSTOP_PATTERN.matcher(segments.get(i)).replaceAll(JA_FULLSTOP));
         }
         return Segmenter.glue(new Language("en"), new Language("ja"), segments, spaces, brules);
     }
